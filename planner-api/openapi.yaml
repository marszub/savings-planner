openapi: "3.0.3"

info:
  title: "Savings Planner API"
  description: "HTTP endpoints docs"
  version: "1.0"

paths:
  "/api/auth/users":
    post:
      summary: "Creates new user account"
      requestBody:
        description: "User data"
        required: true
        content:
          "application/json":
            schema:
              "$ref": "#/components/schemas/RegistrationRequest"
      responses:
        "201":
          description: "User has been created"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/AccessTokenResponse"
        "400":
          description: "Invalid request body"
        "409":
          description: "Email or nick already taken"

  "/api/auth/access-token":
    post:
      summary: "Gets new access token"
      requestBody:
        description: "User credentials"
        required: true
        content:
          "application/json":
            schema:
              "$ref": "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: "Login successful"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/AccessTokenResponse"
        "400":
          description: "Invalid request body"
        "401":
          description: "Wrong login or password"

  "/api/balance":
    put:
      summary: "Update user balance"
      requestBody:
        description: "New balance"
        required: true
        content:
          "application/json":
            schema:
              "$ref": "#/components/schemas/BalanceUpdateRequest"
      responses:
        "204":
          description: "Balance has been updated"
        "401":
          description: "User unauthorized"

    get:
      summary: "Get actual user balance"
      responses:
        "200":
          description: "Got user balance"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/BalanceListResponse"
        "401":
          description: "User unauthorized"

  "/api/balance/sub":
    post:
      summary: "Creates new single subBalance"
      requestBody:
        description: "SubBalance Data"
        required: true
        content:
          "application/json":
            schema:
              "$ref": "#/components/schemas/SubBalanceInfo"
      responses:
        "201":
          description: "Created user subBalance"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/SubBalanceData"
        "401":
          description: "User unauthorized"

    delete:
      summary: "Delete all subBalances"
      responses:
        "204":
          description: "Deleted subBalance"
        "401":
          description: "User unauthorized"

  "/api/balance/sub/{id}":
    get:
      summary: "Get single subBalance"
      responses:
        "200":
          description: "Get user subBalance"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/SubBalanceData"
        "401":
          description: "User unauthorized"

    put:
      summary: "Update single subBalance"
      requestBody:
        description: "SubBalance Data"
        required: true
        content:
          "application/json":
            schema:
              "$ref": "#/components/schemas/SubBalanceInfo"
      responses:
        "204":
          description: "Updated subBalance"
        "401":
          description: "User unauthorized"

  "/api/events":
    post:
      summary: "Creates new event"
      requestBody:
        description: "Event description"
        required: true
        content:
          "application/json":
            schema:
              "$ref": "#/components/schemas/EventDataInput"
      responses:
        "201":
          description: "Event has been created"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/EventData"
        "400":
          description: "Invalid request body"
        "401":
          description: "User unauthorized"
    get:
      summary: "Gets list of user's events"
      responses:
        "200":
          description: "Got list of events"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/EventListResponse"
        "401":
          description: "User unauthorized"

  "/api/events/{id}":
    put:
      summary: "Updates event"
      requestBody:
        description: "Event description"
        required: true
        content:
          "application/json":
            schema:
              "$ref": "#/components/schemas/EventDataInput"
      responses:
        "204":
          description: "Event has been updated"
        "400":
          description: "Invalid request body"
        "401":
          description: "User unauthorized"

    delete:
      summary: "Deletes event"
      responses:
        "204":
          description: "Event successfully deleted"
        "401":
          description: "User unauthorized"
        "404":
          description: "Event with that ID does not exist"

  "/api/events/following-n":
    get:
      summary: "Lists up to eventsNum unique events that are directly after given date"
      requestBody:
        description: "Requested interval description"
        required: true
        content:
          "application/json":
            schema:
              "$ref": "#/components/schemas/TimestampListRequest"
      responses:
        "201":
          description: "Lists up to eventsNum unique events that are directly after given date. If there is more than one timestamp at a time, all are returned, but are counted as one. In this case, list can contain more than eventsNum timestamps. If there are less than eventNum timestamps after start, returned list can be smaller than eventsNum."
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/EventTimestampList"
        "400":
          description: "Invalid request body"
        "401":
          description: "User unauthorized"

  "/api/goals":
    post:
      summary: "Create goal"
      requestBody:
        description: "Goal data"
        required: true
        content:
          "application/json":
            schema:
              "$ref": "#/components/schemas/GoalCreateRequest"
      responses:
        "201":
          description: "Goal successfully created"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/GoalData"
        "401":
          description: "User unauthorized"
    get:
      summary: "Gets list of user's goals"
      responses:
        "200":
          description: "Got list of user's goals"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/GoalListResponse"
        "401":
          description: "User unauthorized"
    patch:
      summary: "Update goals priorities"
      requestBody:
        description: "IDs and new priorities of goals to update"
        required: true
        content:
          "application/json":
            schema:
              "$ref": "#/components/schemas/GoalPriorityUpdate"
      responses:
        "204":
          description: "Update was successful"
        "401":
          description: "User unauthorized"
        "404":
          description: "Goal with the given ID not found among user's goals"

  "/api/goals/{id}":
    delete:
      summary: "Deletes goal"
      responses:
        "204":
          description: "Goal successfully deleted"
        "401":
          description: "User unauthorized"
        "404":
          description: "Goal with that ID does not exist"

  "/api/goals/{id}/sub-goals":
    post:
      summary: "Create SubGoal"
      requestBody:
        description: "SubGoal data"
        required: true
        content:
          "application/json":
            schema:
              "$ref": "#/components/schemas/SubGoalCreateRequest"
      responses:
        "201":
          description: "SubGoal successfully created"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/SubGoalData"
        "401":
          description: "User unauthorized"

  "/api/goals/{id}/sub-goals/{subGoalId}":
    delete:
      summary: "Deletes SubGoal"
      responses:
        "204":
          description: "SubGoal successfully deleted"
        "401":
          description: "User unauthorized"
        "404":
          description: "SubGoal with that ID does not exist"

components:
  schemas:
    RegistrationRequest:
      type: "object"
      properties:
        nick:
          type: "string"
          pattern: ^\w{3,16}$
        email:
          type: "string"
          format: "email"
        password:
          type: "string"
          format: "password"
          minLength: 7
          maxLength: 100

    LoginRequest:
      type: "object"
      properties:
        login:
          type: "string"
          format: "nick or email"
        password:
          type: "string"
          format: "password"
          minLength: 7
          maxLength: 100

    AccessTokenResponse:
      type: "object"
      properties:
        accessToken:
          type: "string"
          format: "encoded access token"
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMiIsImV4cCI6MTY0OTk2MTYzOCwidXNlcklkIjoxfQ.rWcKHXk8Q-QWchLEEBRlxSS3owbbQa5azSM4ag5ogpY"

    AccessToken:
      type: "object"
      description: "Decoded token structure"
      properties:
        header:
          type: "object"
          properties:
            alg:
              type: "string"
              default: "HS256"
            typ:
              type: "string"
              default: "JWT"
        payload:
          type: "object"
          properties:
            sub:
              type: "string"
              format: "nick"
              description: "Owner of the token"
            exp:
              type: "integer"
              format: "int64"
              description: "Expiration (Unix epoch second)"
            userId:
              type: "integer"
              format: "int32"
              description: "Owner's ID"

    BalanceUpdateRequest:
      type: "object"
      properties:
        balance:
          type: "integer"
          format: "positive or zero account balance"
          example: 10000

    BalanceListResponse:
      type: "object"
      properties:
        balance:
          type: "integer"
          format: "positive or zero account balance"
          example: 0

    SubBalanceInfo:
      type: "object"
      properties:
        balance:
          type: "integer"
          format: "positive or zero account balance"
          example: 10000

    SubBalanceData:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "nonegative"
          example: 0
        balance:
          type: "integer"
          format: "positive or zero"
          example: 10000

    EventDataInput:
      type: "object"
      properties:
        title:
          type: "string"
          format: "event name"
          minLength: 1
          maxLength: 200
          example: "Repayment"
        amount:
          type: "integer"
          format: "positive or negative money gain"
          example: -205
        isCyclic:
          type: "boolean"
          description: "If set to true: fields begin, cycleBase and cycleLength must be set. If set to false: field timestamp must be set."
          example: true
        timestamp:
          type: "integer"
          description: "Time of one-time event in epoch seconds"
          example: 100000
        begin:
          type: "integer"
          description: "Time of the begin of cyclic event in epoch seconds"
          example: 100000
        cycleBase:
          type: "integer"
          description: "Base of event cycle. 7 - day of week, 5 - day of month, 6 - day of year"
          format: "[756]"
          example: 7
        cycleLength:
          type: "integer"
          description: "How many cycle bases are between consecutive events. For example: cycleBase=7, cycleLength=2 means that event takes place every 2 weeks"
          example: 2

    EventListResponse:
      type: "object"
      properties:
        events:
          type: "array"
          items:
            $ref: '#/components/schemas/EventData'

    EventData:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "id of an object"
          example: 1
        title:
          type: "string"
          format: "event name"
          minLength: 1
          maxLength: 200
          example: "Repayment"
        amount:
          type: "integer"
          format: "positive or negative money gain"
          example: -205
        isCyclic:
          type: "boolean"
          description: "If set to true: fields begin, cycleBase and cycleLength must be set. If set to false: field timestamp must be set."
          example: true
        timestamp:
          type: "integer"
          description: "Time of one-time event in epoch seconds"
          example: 100000
        begin:
          type: "integer"
          description: "Time of the begin of cyclic event in epoch seconds"
          example: 100000
        cycleBase:
          type: "integer"
          description: "Base of event cycle. 7 - day of week, 5 - day of month, 6 - day of year"
          format: "[756]"
          example: 7
        cycleLength:
          type: "integer"
          description: "How many cycle bases are between consecutive events. For example: cycleBase=7, cycleLength=2 means that event takes place every 2 weeks"
          example: 2


    TimestampListRequest:
      type: "object"
      properties:
        start:
          type: "integer"
          description: "Time before the first timestamp to return"
          example: 10000
        eventsNum:
          type: "integer"
          description: "How many unique events are requested"
          example: 5

    EventTimestampList:
      type: "object"
      properties:
        timestamps:
          type: "array"
          items:
            $ref: '#/components/schemas/EventTimestamp'

    EventTimestamp:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "id of an object"
          example: 1
        title:
          type: "string"
          format: "event name"
          minLength: 1
          maxLength: 200
          example: "Repayment"
        amount:
          type: "integer"
          format: "positive or negative money gain"
          example: -205
        timestamp:
          type: "integer"
          description: "Time of one-time event in epoch seconds"
          example: 100000

    GoalListResponse:
      type: "object"
      properties:
        goals:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "integer"
                format: "id of an object"
                example: 1
              title:
                type: "string"
                format: "goal name"
                minLength: 1
                maxLength: 200
                example: "Car"
              amount:
                type: "integer"
                format: "cost of fulfilling the goal"
                example: 201
              subGoals:
                type: "array"
                properties:
                  id:
                    type: "integer"
                    format: "id of an subGoal"
                    example: 1
                  title:
                    type: "string"
                    format: "subGoal name"
                    minLength: 1
                    maxLength: 200
                    example: "Car"

    GoalCreateRequest:
      type: "object"
      properties:
        list:
          type: "array"
          items:
            type: "object"
            properties:
              title:
                type: "string"
                minLength: 1
                maxLength: 200
                example: "Car"
              amount:
                type: "integer"
                format: "cost of fulfilling the goal"
                example: 201

    GoalPriorityUpdate:
      type: "object"
      properties:
        newPriorities:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "integer"
              newPriority:
                type: "integer"

    GoalData:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "id of an object"
          example: 1
        title:
          type: "string"
          format: "goal name"
          minLength: 1
          maxLength: 200
          example: "Car"
        amount:
          type: "integer"
          format: "cost of fulfilling the goal"
          example: 201
        subGoals:
          type: "array"
          properties:
            id:
              type: "integer"
              format: "id of an subGoal"
              example: 1
            title:
              type: "string"
              minLength: 1
              maxLength: 200
              example: "Car"

    SubGoalCreateRequest:
      type: "object"
      properties:
        title:
          type: "string"
          example: "Bricks"
          minLength: 1
          maxLength: 200

    SubGoalData:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "id of an subGoal"
          example: 1
        title:
          type: "string"
          minLength: 1
          maxLength: 200
          example: "Bricks"

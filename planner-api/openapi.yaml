openapi: "3.0.3"

info:
  title: "Savings Planner API"
  description: "HTTP endpoints docs"
  version: "1.0"

paths:
  "/api/auth/users":
    post:
      summary: "Creates new user account"
      requestBody:
        description: "User data"
        required: true
        content:
          "application/json":
            schema:
              "$ref": "#/components/schemas/RegistrationRequest"
      responses:
        "200":
          description: "User has been created"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/AccessTokenResponse"
        "400":
          description: "Invalid request body"
        "409":
          description: "Email or nick already taken"

  "/api/auth/access-token":
    post:
      summary: "Gets new access token"
      requestBody:
        description: "User credentials"
        required: true
        content:
          "application/json":
            schema:
              "$ref": "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: "Login successful"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/AccessTokenResponse"
        "400":
          description: "Invalid request body"
        "401":
          description: "Wrong login or password"

  "/api/balance":
    put:
      summary: "Update user balance"
      requestBody:
        description: "New balance"
        required: true
        content:
          "application/json":
            schema:
              "$ref": "#/components/schemas/BalanceUpdateRequest"
      responses:
        "204":
          description: "Balance has been updated"
        "401":
          description: "User unauthorized"

    get:
      summary: "Get actual user balance"
      responses:
        "200":
          description: "Got user balance"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/BalanceListResponse"
        "401":
          description: "User unauthorized"

  "/api/event/create":
    post:
      summary: "Creates new one-time event"
      requestBody:
        description: "Event data"
        required: true
        content:
          "application/json":
            schema:
              "$ref": "#/components/schemas/EventCreateRequest"
      responses:
        "200":
          description: "Event has been created"
        "400":
          description: "Invalid request body"
        "401":
          description: "User unauthorized"

  "/api/event/list":
    post:
      summary: "Gets list of user's one-time events"
      responses:
        "200":
          description: "Got list of events"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/EventListResponse"
        "401":
          description: "User unauthorized"

  "/api/goal":
    post:
      summary: "Create goal"
      requestBody:
        description: "Goal data"
        required: true
        content:
          "application/json":
            schema:
              "$ref": "#/components/schemas/GoalCreateRequest"
      responses:
        "200":
          description: "Goal successfully created"
        "401":
          description: "User unauthorized"

  "/api/goals":
    get:
      summary: "Gets list of user's goals"
      responses:
        "200":
          description: "Got list of user's goals"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/GoalListResponse"
        "401":
          description: "User unauthorized"

  "/api/goal/{id}":
    delete:
      summary: "Deletes goal"
      responses:
        "200":
          description: "Goal successfully deleted"
        "401":
          description: "User unauthorized"
        "403":
          description: "Access to resource denied"
        "404":
          description: "Goal with that ID does not exist"

components:
  schemas:
    RegistrationRequest:
      type: "object"
      properties:
        nick:
          type: "string"
          pattern: ^\w{3,16}$
        email:
          type: "string"
          format: "email"
        password:
          type: "string"
          format: "password"
          minLength: 7
          maxLength: 100

    LoginRequest:
      type: "object"
      properties:
        login:
          type: "string"
          format: "nick or email"
        password:
          type: "string"
          format: "password"
          minLength: 7
          maxLength: 100

    AccessTokenResponse:
      type: "object"
      properties:
        accessToken:
          type: "string"
          format: "encoded access token"
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMiIsImV4cCI6MTY0OTk2MTYzOCwidXNlcklkIjoxfQ.rWcKHXk8Q-QWchLEEBRlxSS3owbbQa5azSM4ag5ogpY"

    AccessToken:
      type: "object"
      description: "Decoded token structure"
      properties:
        header:
          type: "object"
          properties:
            alg:
              type: "string"
              default: "HS256"
            typ:
              type: "string"
              default: "JWT"
        payload:
          type: "object"
          properties:
            sub:
              type: "string"
              format: "nick"
              description: "Owner of the token"
            exp:
              type: "integer"
              format: "int64"
              description: "Expiration (Unix epoch second)"
            userId:
              type: "integer"
              format: "int32"
              description: "Owner's ID"

    BalanceUpdateRequest:
      type: "object"
      properties:
        balance:
          type: "integer"
          format: "positive or zero account balance"
          example: 10000

    BalanceListResponse:
      type: "object"
      properties:
        balance:
          type: "integer"
          format: "positive or zero account balance"
          example: 0

    EventCreateRequest:
      type: "object"
      properties:
        title:
          type: "string"
          format: "event name"
          minLength: 1
          maxLength: 200
          example: "Repayment"
        amount:
          type: "integer"
          format: "positive or negative money gain"
          example: -205
        timestamp:
          type: "string"
          format: "yyyy-mm-dd hh:mm:ss.n"
          example: "2022-01-21 00:00:00.0"

    EventListResponse:
      type: "object"
      properties:
        list:
          type: "array"
          items:
            type: "object"
            properties:
              title:
                type: "string"
                format: "event name"
                minLength: 1
                maxLength: 200
                example: "Repayment"
              amount:
                type: "integer"
                format: "positive or negative money gain"
                example: 201
              timestamp:
                type: "string"
                format: "yyyy-mm-dd hh:mm:ss.n"
                example: "2022-01-21 00:00:00.0"

    GoalListResponse:
      type: "object"
      properties:
        list:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "integer"
                format: "id of an object"
                example: 1
              title:
                type: "string"
                format: "goal name"
                minLength: 1
                maxLength: 200
                example: "Car"
              amount:
                type: "integer"
                format: "cost of fulfilling the goal"
                example: 201

    GoalCreateRequest:
      type: "object"
      properties:
        list:
          type: "array"
          items:
            type: "object"
            properties:
              title:
                type: "string"
                format: "goal name"
                minLength: 1
                maxLength: 200
                example: "Car"
              amount:
                type: "integer"
                format: "cost of fulfilling the goal"
                example: 201
